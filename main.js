(()=>{"use strict";class e{constructor(e,t,s){this._name=e.name,this._link=e.link,this._handleCardClick=t,this._cardSelector=s}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".cards__conteiner").cloneNode(!0)}_setEventListeners(){this._likeButton=this._element.querySelector(".cards__emotion"),this._likeButton.addEventListener("click",(()=>{this._clickLike()})),this._delButton=this._element.querySelector(".cards__trashicon"),this._delButton.addEventListener("click",(()=>{this._clickDelete()})),this._cardImage=this._element.querySelector(".cards__image"),this._cardImage.addEventListener("click",(()=>{this._handleCardClick(this._link,this._name)}))}_clickLike(){this._likeButton.classList.toggle("cards__emotion_active")}_clickDelete(){this._element.remove(),this._element=null}generateCard(){return this._element=this._getTemplate(),this._cardTitle=this._element.querySelector(".cards__title"),this._setEventListeners(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardTitle.textContent=this._name,this._element}}class t{constructor(e,t){this._selectorsConfiguration=e,this._formElement=t,this._submitButton=this._formElement.querySelector(this._selectorsConfiguration.submitButtonSelector),this._inputList=Array.from(this._formElement.querySelectorAll(this._selectorsConfiguration.inputSelector))}_showInputError(e,t){const s=this._formElement.querySelector(`.${e.id}-error`);e.classList.add(this._selectorsConfiguration.errorClass),s.textContent=t,s.classList.add(this._selectorsConfiguration.inputErrorClass)}_hideInputError(e){const t=this._formElement.querySelector(`.${e.id}-error`);e.classList.remove(this._selectorsConfiguration.errorClass),t.textContent="",t.classList.remove(this._selectorsConfiguration.inputErrorClass)}_isValid(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_activetingSubmit(){this._submitButton.classList.remove(this._selectorsConfiguration.inactiveButtonClass),this._submitButton.removeAttribute("disabled")}deactivetingSubmit(){this._submitButton.setAttribute("disabled",!0),this._submitButton.classList.add(this._selectorsConfiguration.inactiveButtonClass)}_toggleButtonState(e){this._hasInvalidInput(e)?this.deactivetingSubmit():this._activetingSubmit()}_setEventListeners(){this._toggleButtonState(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._isValid(e),this._toggleButtonState()}))}))}enableValidation(){this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}class s{constructor(e){this._popup=document.querySelector(e)}open(){this._popup.classList.add("popup_type_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popup.classList.remove("popup_type_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup_type_opened")||e.target.classList.contains("popup__close"))&&this.close()}))}}class o extends s{constructor(e,t){super(e),this._submitForm=t,this._form=this._popup.querySelector(".popup__form"),this._inputValues=this._form.querySelectorAll(".popup__input")}_getInputValues(){const e={};return this._inputValues.forEach((t=>e[t.name]=t.value)),e}setEventListeners(){super.setEventListeners(),this._form.addEventListener("submit",(e=>{e.preventDefault(),this._submitForm(this._getInputValues()),this.close()}))}close(){this._form.reset(),super.close()}}const n=document.querySelector(".profile__button"),r=document.querySelector("#popupEdit"),i=document.querySelector("#popupAdd"),p=(document.querySelector(".popup__close_add"),document.querySelector(".popup__close_edit"),document.querySelector(".popup__close_zoom"),document.querySelector(".popup__form"),document.querySelector(".cards"),document.querySelector(".profile__name"),document.querySelector(".profile__spec"),document.querySelector(".popup__input_name")),u=document.querySelector(".popup__input_job"),c=document.querySelector(".profile__add"),_=(document.querySelector(".popup__input_image"),document.querySelector(".popup__input_title"),document.querySelector(".popup__form_type_add"),{formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",errorClass:"popup__error_visible",inputErrorClass:"popup__input_error"}),l=new t(_,i);l.enableValidation(),new t(_,r).enableValidation();const a=new class extends s{constructor(e){super(e),this._popupImage=this._popup.querySelector(".popup__image"),this._popupSubtitle=this._popup.querySelector(".popup__subtitle")}openPopupZoom(e,t){this._popupImage.src=e,this._popupImage.alt=t,this._popupSubtitle.textContent=t,super.open()}}(".popup_type_zoom");a.setEventListeners();const d=new class{constructor({items:e,renderer:t},s){this._items=e,this._renderer=t,this._container=document.querySelector(s)}addItem(e){this._container.prepend(e)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}}({items:[{name:"Архыз",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg"},{name:"Челябинская область",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg"},{name:"Иваново",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg"},{name:"Камчатка",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg"},{name:"Холмогорский район",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg"},{name:"Байкал",link:"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg"}],renderer:e=>{d.addItem(m(e))}},".cards");function h(e,t){a.openPopupZoom(e,t)}function m(t){return new e(t,h,".cards__list").generateCard()}d.renderItems();const y=new class{constructor(e,t){this._name=document.querySelector(e),this._job=document.querySelector(t)}getUserInfo(){return{name:this._name.textContent,info:this._job.textContent}}setUserInfo(e){this._name.textContent=e.name,this._job.textContent=e.job}}(".profile__name",".profile__spec"),v=new o(".popup_type_edit",(e=>{y.setUserInfo(e)}));v.setEventListeners(),n.addEventListener("click",(()=>{!function(){const e=y.getUserInfo();p.value=e.name,u.value=e.info}(),v.open()}));const g=new o(".popup_type_add",(e=>{d.addItem(m(e))}));c.addEventListener("click",(()=>{l.resetValidation(),g.open()})),g.setEventListeners()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eERtSCxFQUFVTSxZQUFZekgsTUFFMUIySCxFQUFjOUMsb0JBRWRlLEVBQVcxRSxpQkFBaUIsU0FBUyxNQVhyQyxXQUNJLE1BQU0wRyxFQUFrQlQsRUFBVUksY0FDbEN4QixFQUFVTixNQUFRbUMsRUFBZ0J2SCxLQUNsQzJGLEVBQVNQLE1BQVFtQyxFQUFnQkosS0FTakNLLEdBQ0FGLEVBQWNwRCxVQUdsQixNQUFNdUQsRUFBZSxJQUFJOUMsRURKTyxtQkNJMEJRLElBQ3REZ0IsRUFBUU8sUUFBUUcsRUFBYzFCLE9BR2xDUyxFQUFVL0UsaUJBQWlCLFNBQVMsS0FDaENpRixFQUFrQmhDLGtCQUNsQjJELEVBQWF2RCxVQUdqQnVELEVBQWFqRCxxQiIsInNvdXJjZXMiOlsid2VicGFjazovL3ByYWt0aWt1bS8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vcHJha3Rpa3VtLy4vc3JjL2NvbXBvbmVudHMvRm9ybVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cC5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL3ByYWt0aWt1bS8uL3NyYy91dGlscy9jb25zdGF0bnRzLmpzIiwid2VicGFjazovL3ByYWt0aWt1bS8uL3NyYy9wYWdlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3ByYWt0aWt1bS8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDYXJkIHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhLCBoYW5kbGVDYXJkQ2xpY2ssIGNhcmRTZWxlY3Rvcikge1xuICAgICAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB0aGlzLl9saW5rID0gZGF0YS5saW5rO1xuICAgICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XG4gICAgICAgIHRoaXMuX2NhcmRTZWxlY3RvciA9IGNhcmRTZWxlY3RvcjtcbiAgICB9O1xuXG4gICAgX2dldFRlbXBsYXRlKCkge1xuICAgICAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XG4gICAgICAgICAgICAucXVlcnlTZWxlY3Rvcih0aGlzLl9jYXJkU2VsZWN0b3IpXG4gICAgICAgICAgICAuY29udGVudFxuICAgICAgICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5jYXJkc19fY29udGVpbmVyJylcbiAgICAgICAgICAgIC5jbG9uZU5vZGUodHJ1ZSlcblxuICAgICAgICByZXR1cm4gY2FyZEVsZW1lbnRcbiAgICB9O1xuXG4gICAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgICB0aGlzLl9saWtlQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZHNfX2Vtb3Rpb24nKTtcbiAgICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX2NsaWNrTGlrZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fZGVsQnV0dG9uID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZHNfX3RyYXNoaWNvbicpO1xuICAgICAgICB0aGlzLl9kZWxCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9jbGlja0RlbGV0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY2FyZHNfX2ltYWdlJylcbiAgICAgICAgdGhpcy5fY2FyZEltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrKHRoaXMuX2xpbmssIHRoaXMuX25hbWUpXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfY2xpY2tMaWtlKCkge1xuICAgICAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoJ2NhcmRzX19lbW90aW9uX2FjdGl2ZScpXG4gICAgfTtcblxuICAgIF9jbGlja0RlbGV0ZSgpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IG51bGw7XG4gICAgfTtcblxuICAgIGdlbmVyYXRlQ2FyZCgpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XG4gICAgICAgIHRoaXMuX2NhcmRUaXRsZSA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzX190aXRsZScpO1xuICAgICAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpO1xuICAgICAgICB0aGlzLl9jYXJkSW1hZ2Uuc3JjID0gdGhpcy5fbGluaztcbiAgICAgICAgdGhpcy5fY2FyZEltYWdlLmFsdCA9IHRoaXMuX25hbWU7XG4gICAgICAgIHRoaXMuX2NhcmRUaXRsZS50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRcbiAgICB9O1xufTsiLCJleHBvcnQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3JzQ29uZmlndXJhdGlvbiwgZm9ybUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fc2VsZWN0b3JzQ29uZmlndXJhdGlvbiA9IHNlbGVjdG9yc0NvbmZpZ3VyYXRpb247XG4gICAgICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2VsZWN0b3JzQ29uZmlndXJhdGlvbi5zdWJtaXRCdXR0b25TZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20odGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9zZWxlY3RvcnNDb25maWd1cmF0aW9uLmlucHV0U2VsZWN0b3IpKVxuICAgIH1cblxuICAgIF9zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkge1xuICAgICAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XG4gICAgICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3NlbGVjdG9yc0NvbmZpZ3VyYXRpb24uZXJyb3JDbGFzcyk7XG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGVycm9yTWVzc2FnZTtcbiAgICAgICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fc2VsZWN0b3JzQ29uZmlndXJhdGlvbi5pbnB1dEVycm9yQ2xhc3MpO1xuICAgIH1cblxuICAgIF9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xuICAgICAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9zZWxlY3RvcnNDb25maWd1cmF0aW9uLmVycm9yQ2xhc3MpXG4gICAgICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9ICcnXG4gICAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3NlbGVjdG9yc0NvbmZpZ3VyYXRpb24uaW5wdXRFcnJvckNsYXNzKVxuICAgIH07XG5cbiAgICBfaXNWYWxpZChpbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3dJbnB1dEVycm9yKGlucHV0RWxlbWVudCwgaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaGFzSW52YWxpZElucHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQ7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfYWN0aXZldGluZ1N1Ym1pdCgpIHtcbiAgICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fc2VsZWN0b3JzQ29uZmlndXJhdGlvbi5pbmFjdGl2ZUJ1dHRvbkNsYXNzKVxuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24ucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgfVxuXG4gICAgZGVhY3RpdmV0aW5nU3VibWl0KCkge1xuICAgICAgICB0aGlzLl9zdWJtaXRCdXR0b24uc2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIiwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5jbGFzc0xpc3QuYWRkKHRoaXMuX3NlbGVjdG9yc0NvbmZpZ3VyYXRpb24uaW5hY3RpdmVCdXR0b25DbGFzcylcbiAgICB9XG5cbiAgICBfdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkSW5wdXQoaW5wdXRMaXN0KSkge1xuICAgICAgICAgICAgdGhpcy5kZWFjdGl2ZXRpbmdTdWJtaXQoKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZldGluZ1N1Ym1pdCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKClcbiAgICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2lzVmFsaWQoaW5wdXRFbGVtZW50KVxuICAgICAgICAgICAgICAgIHRoaXMuX3RvZ2dsZUJ1dHRvblN0YXRlKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9O1xuICAgIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fdG9nZ2xlQnV0dG9uU3RhdGUoKTtcblxuICAgICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvcihpbnB1dEVsZW1lbnQpXG4gICAgICAgIH0pO1xuICAgIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xuICAgIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5fcG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwU2VsZWN0b3IpO1xuICAgIH1cbiAgICBvcGVuKCkge1xuICAgICAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QuYWRkKCdwb3B1cF90eXBlX29wZW5lZCcpXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVFc2NDbG9zZSlcbiAgICB9XG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX3R5cGVfb3BlbmVkJylcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUVzY0Nsb3NlKVxuICAgIH1cbiAgICBfaGFuZGxlRXNjQ2xvc2UgPSAoZXZ0KSA9PiB7XG4gICAgICAgIGlmIChldnQua2V5ID09PSAnRXNjYXBlJykge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIChldnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfdHlwZV9vcGVuZWQnKSB8fCBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfX2Nsb3NlJykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSIsImltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEZvcm0gZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvciwgc3VibWl0Rm9ybSkge1xuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICAgICAgdGhpcy5fc3VibWl0Rm9ybSA9IHN1Ym1pdEZvcm07XG4gICAgICAgIHRoaXMuX2Zvcm0gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm0nKTtcbiAgICAgICAgdGhpcy5faW5wdXRWYWx1ZXMgPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9faW5wdXQnKVxuICAgIH1cblxuICAgIF9nZXRJbnB1dFZhbHVlcygpIHtcbiAgICAgICAgY29uc3QgaW5wdXRzVmFsdWUgPSB7fTtcbiAgICAgICAgdGhpcy5faW5wdXRWYWx1ZXMuZm9yRWFjaCgoaXRlbSkgPT5cbiAgICAgICAgICAgIGlucHV0c1ZhbHVlW2l0ZW0ubmFtZV0gPSBpdGVtLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlucHV0c1ZhbHVlO1xuICAgIH07XG5cbiAgICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICAgICAgdGhpcy5fZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdEZvcm0odGhpcy5fZ2V0SW5wdXRWYWx1ZXMoKSk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKClcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNsb3NlKCkge1xuICAgICAgICB0aGlzLl9mb3JtLnJlc2V0KCk7XG4gICAgICAgIHN1cGVyLmNsb3NlKCk7XG4gICAgfTtcbn0iLCJleHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW3tcbiAgICAgICAgbmFtZTogJ9CQ0YDRhdGL0LcnLFxuICAgICAgICBsaW5rOiAnaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2Fya2h5ei5qcGcnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6ICfQp9C10LvRj9Cx0LjQvdGB0LrQsNGPINC+0LHQu9Cw0YHRgtGMJyxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vcGljdHVyZXMuczMueWFuZGV4Lm5ldC9mcm9udGVuZC1kZXZlbG9wZXIvY2FyZHMtY29tcHJlc3NlZC9jaGVseWFiaW5zay1vYmxhc3QuanBnJ1xuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAn0JjQstCw0L3QvtCy0L4nLFxuICAgICAgICBsaW5rOiAnaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2l2YW5vdm8uanBnJ1xuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAn0JrQsNC80YfQsNGC0LrQsCcsXG4gICAgICAgIGxpbms6ICdodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQva2FtY2hhdGthLmpwZydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogJ9Cl0L7Qu9C80L7Qs9C+0YDRgdC60LjQuSDRgNCw0LnQvtC9JyxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vcGljdHVyZXMuczMueWFuZGV4Lm5ldC9mcm9udGVuZC1kZXZlbG9wZXIvY2FyZHMtY29tcHJlc3NlZC9raG9sbW9nb3Jza3ktcmF5b24uanBnJ1xuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiAn0JHQsNC50LrQsNC7JyxcbiAgICAgICAgbGluazogJ2h0dHBzOi8vcGljdHVyZXMuczMueWFuZGV4Lm5ldC9mcm9udGVuZC1kZXZlbG9wZXIvY2FyZHMtY29tcHJlc3NlZC9iYWlrYWwuanBnJ1xuICAgIH1cbl07XG5cbmV4cG9ydCBjb25zdCBlZGl0QnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2J1dHRvbicpO1xuZXhwb3J0IGNvbnN0IHBvcHVwRWRpdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwb3B1cEVkaXQnKTtcbmV4cG9ydCBjb25zdCBwb3B1cEFkZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwb3B1cEFkZCcpO1xuZXhwb3J0IGNvbnN0IGJ1dHRvbkNsb3NlUG9wdXBBZGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlX2FkZCcpO1xuZXhwb3J0IGNvbnN0IGJ1dHRvbkNsb3NlUG9wdXBFZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZV9lZGl0Jyk7XG5leHBvcnQgY29uc3QgYnV0dG9uQ2xvc2VQb3B1cFpvb20gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlX3pvb20nKTtcbmV4cG9ydCBjb25zdCBmb3JtRWRpdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xuZXhwb3J0IGNvbnN0IGNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhcmRzJyk7XG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fbmFtZScpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVKb2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fc3BlYycpO1xuZXhwb3J0IGNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfbmFtZScpO1xuZXhwb3J0IGNvbnN0IGpvYklucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF9qb2InKTtcbmV4cG9ydCBjb25zdCBhZGRCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkJyk7XG5leHBvcnQgY29uc3QgaXRlbUltYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF9pbWFnZScpO1xuZXhwb3J0IGNvbnN0IGl0ZW1UaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfdGl0bGUnKTtcbmV4cG9ydCBjb25zdCBmb3JtQWRkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19mb3JtX3R5cGVfYWRkJyk7XG5leHBvcnQgY29uc3QgcG9wdXBJbWFnZVNlbGVjdG9yID0gJy5wb3B1cF9faW1hZ2UnO1xuZXhwb3J0IGNvbnN0IHBvcHVwU3VidGl0bGVTZWxlY3RvciA9ICcucG9wdXBfX3N1YnRpdGxlJztcbmV4cG9ydCBjb25zdCBwb3B1cFpvb20gPSAnLnBvcHVwX3R5cGVfem9vbSc7XG5leHBvcnQgY29uc3Qgc2VjdGlvbkNhcmRzID0gJy5jYXJkcyc7XG5leHBvcnQgY29uc3QgY2FyZHNMaXN0ID0gJy5jYXJkc19fbGlzdCc7XG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWVTZWxlY3RvciA9ICcucHJvZmlsZV9fbmFtZSc7XG5leHBvcnQgY29uc3QgcHJvZmlsZUluZm9TZWxlY3RvciA9ICcucHJvZmlsZV9fc3BlYyc7XG5leHBvcnQgY29uc3QgcG9wdXBFZGl0U2VsZWN0b3IgPSAnLnBvcHVwX3R5cGVfZWRpdCc7XG5leHBvcnQgY29uc3QgcG9wdXBBZGRTZWxlY3RvciA9ICcucG9wdXBfdHlwZV9hZGQnO1xuZXhwb3J0IGNvbnN0IHNlbGVjdG9yc0NvbmZpZ3VyYXRpb24gPSB7XG4gICAgZm9ybVNlbGVjdG9yOiAnLnBvcHVwX19mb3JtJyxcbiAgICBpbnB1dFNlbGVjdG9yOiAnLnBvcHVwX19pbnB1dCcsXG4gICAgc3VibWl0QnV0dG9uU2VsZWN0b3I6ICcucG9wdXBfX2J1dHRvbicsXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogJ3BvcHVwX19idXR0b25fZGlzYWJsZWQnLFxuICAgIGVycm9yQ2xhc3M6ICdwb3B1cF9fZXJyb3JfdmlzaWJsZScsXG4gICAgaW5wdXRFcnJvckNsYXNzOiAncG9wdXBfX2lucHV0X2Vycm9yJyxcbn07IiwiaW1wb3J0IHsgQ2FyZCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ2FyZC5qcyc7XG5pbXBvcnQgeyBGb3JtVmFsaWRhdG9yIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzJztcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gJy4uL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyc7XG5pbXBvcnQgU2VjdGlvbiBmcm9tICcuLi9jb21wb25lbnRzL1NlY3Rpb24uanMnO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gJy4uL2NvbXBvbmVudHMvVXNlckluZm8uanMnO1xuaW1wb3J0ICcuL2luZGV4LmNzcydcbmltcG9ydCB7IGluaXRpYWxDYXJkcywgZWRpdEJ1dHRvbiwgcG9wdXBFZGl0LCBzZWN0aW9uQ2FyZHMsIGNhcmRzTGlzdCwgcG9wdXBab29tLCBwb3B1cEFkZCwgcG9wdXBFZGl0U2VsZWN0b3IsIHBvcHVwQWRkU2VsZWN0b3IsIHByb2ZpbGVOYW1lU2VsZWN0b3IsIHByb2ZpbGVJbmZvU2VsZWN0b3IsIG5hbWVJbnB1dCwgam9iSW5wdXQsIGFkZEJ1dHRvbiwgY2FyZHMsIHNlbGVjdG9yc0NvbmZpZ3VyYXRpb24gfSBmcm9tICcuLi91dGlscy9jb25zdGF0bnRzLmpzJ1xuXG5jb25zdCBhZGRGb3JtVmFsaWRhdGlvbiA9IG5ldyBGb3JtVmFsaWRhdG9yKHNlbGVjdG9yc0NvbmZpZ3VyYXRpb24sIHBvcHVwQWRkKTtcbmFkZEZvcm1WYWxpZGF0aW9uLmVuYWJsZVZhbGlkYXRpb24oKTtcblxuY29uc3QgZWRpdEZvcm1WYWxpZGF0aW9uID0gbmV3IEZvcm1WYWxpZGF0b3Ioc2VsZWN0b3JzQ29uZmlndXJhdGlvbiwgcG9wdXBFZGl0KTtcbmVkaXRGb3JtVmFsaWRhdGlvbi5lbmFibGVWYWxpZGF0aW9uKCk7XG5cbmNvbnN0IHBvcHVwV2l0aFpvb20gPSBuZXcgUG9wdXBXaXRoSW1hZ2UocG9wdXBab29tKVxucG9wdXBXaXRoWm9vbS5zZXRFdmVudExpc3RlbmVycygpO1xuXG5cbmNvbnN0IG5ld0l0ZW0gPSBuZXcgU2VjdGlvbih7XG4gICAgaXRlbXM6IGluaXRpYWxDYXJkcyxcbiAgICByZW5kZXJlcjogKGl0ZW0pID0+IHtcbiAgICAgICAgbmV3SXRlbS5hZGRJdGVtKGNyZWF0ZU5ld0NhcmQoaXRlbSkpO1xuICAgIH1cbn0sIHNlY3Rpb25DYXJkcyk7XG5uZXdJdGVtLnJlbmRlckl0ZW1zKCk7XG5cbmZ1bmN0aW9uIGhhbmRsZUNhcmRDbGljayhsaW5rLCBuYW1lKSB7XG4gICAgcG9wdXBXaXRoWm9vbS5vcGVuUG9wdXBab29tKGxpbmssIG5hbWUpXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdDYXJkKGRhdGEpIHtcbiAgICBjb25zdCBuZXdDYXJkID0gbmV3IENhcmQoZGF0YSwgaGFuZGxlQ2FyZENsaWNrLCBjYXJkc0xpc3QpXG4gICAgcmV0dXJuIG5ld0NhcmQuZ2VuZXJhdGVDYXJkKClcbn07XG5cbmNvbnN0IHVzZXJJbmZvbSA9IG5ldyBVc2VySW5mbyhwcm9maWxlTmFtZVNlbGVjdG9yLCBwcm9maWxlSW5mb1NlbGVjdG9yKVxuXG5mdW5jdGlvbiBzZXRJbnB1dFZhbHVlKCkge1xuICAgIGNvbnN0IHVzZXJJbmZvcm1hdGlvbiA9IHVzZXJJbmZvbS5nZXRVc2VySW5mbygpO1xuICAgIG5hbWVJbnB1dC52YWx1ZSA9IHVzZXJJbmZvcm1hdGlvbi5uYW1lO1xuICAgIGpvYklucHV0LnZhbHVlID0gdXNlckluZm9ybWF0aW9uLmluZm87XG59XG5cbmNvbnN0IHBvcHVwRm9ybUVkaXQgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cEVkaXRTZWxlY3RvciwgKGRhdGEpID0+IHtcbiAgICB1c2VySW5mb20uc2V0VXNlckluZm8oZGF0YSlcbn0pO1xucG9wdXBGb3JtRWRpdC5zZXRFdmVudExpc3RlbmVycygpO1xuXG5lZGl0QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIHNldElucHV0VmFsdWUoKTtcbiAgICBwb3B1cEZvcm1FZGl0Lm9wZW4oKTtcbn0pXG5cbmNvbnN0IHBvcHVwRm9ybUFkZCA9IG5ldyBQb3B1cFdpdGhGb3JtKHBvcHVwQWRkU2VsZWN0b3IsIChpdGVtKSA9PiB7XG4gICAgbmV3SXRlbS5hZGRJdGVtKGNyZWF0ZU5ld0NhcmQoaXRlbSkpO1xufSlcblxuYWRkQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGFkZEZvcm1WYWxpZGF0aW9uLnJlc2V0VmFsaWRhdGlvbigpO1xuICAgIHBvcHVwRm9ybUFkZC5vcGVuKClcbn0pO1xuXG5wb3B1cEZvcm1BZGQuc2V0RXZlbnRMaXN0ZW5lcnMoKTsiLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4vUG9wdXAuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XG4gICAgY29uc3RydWN0b3IocG9wdXBTZWxlY3Rvcikge1xuICAgICAgICBzdXBlcihwb3B1cFNlbGVjdG9yKVxuICAgICAgICB0aGlzLl9wb3B1cEltYWdlID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZScpO1xuICAgICAgICB0aGlzLl9wb3B1cFN1YnRpdGxlID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19zdWJ0aXRsZScpXG4gICAgfVxuICAgIG9wZW5Qb3B1cFpvb20obGluaywgbmFtZSkge1xuICAgICAgICB0aGlzLl9wb3B1cEltYWdlLnNyYyA9IGxpbms7XG4gICAgICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gbmFtZTtcbiAgICAgICAgdGhpcy5fcG9wdXBTdWJ0aXRsZS50ZXh0Q29udGVudCA9IG5hbWU7XG4gICAgICAgIHN1cGVyLm9wZW4oKTtcbiAgICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIHNlbGVjdG9yQ29udGFpbmVyKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3JDb250YWluZXIpO1xuICAgIH1cbiAgICBhZGRJdGVtKGl0ZW0pIHtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyLnByZXBlbmQoaXRlbSlcbiAgICB9XG4gICAgcmVuZGVySXRlbXMoKSB7XG4gICAgICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlcihpdGVtKVxuICAgICAgICB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlckluZm8ge1xuICAgIGNvbnN0cnVjdG9yKG5hbWVTZWxlY3RvciwgaW5mb1NlbGVjdG9yKSB7XG4gICAgICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XG4gICAgICAgIHRoaXMuX2pvYiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoaW5mb1NlbGVjdG9yKTtcbiAgICB9O1xuICAgIGdldFVzZXJJbmZvKCkge1xuICAgICAgICBjb25zdCB1c2VySW5mbyA9IHtcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuX25hbWUudGV4dENvbnRlbnQsXG4gICAgICAgICAgICBpbmZvOiB0aGlzLl9qb2IudGV4dENvbnRlbnQsXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVzZXJJbmZvXG4gICAgfTtcbiAgICBzZXRVc2VySW5mbyhkYXRhKSB7XG4gICAgICAgIHRoaXMuX25hbWUudGV4dENvbnRlbnQgPSBkYXRhLm5hbWU7XG4gICAgICAgIHRoaXMuX2pvYi50ZXh0Q29udGVudCA9IGRhdGEuam9iO1xuICAgIH1cbn0iXSwibmFtZXMiOlsiQ2FyZCIsImNvbnN0cnVjdG9yIiwiZGF0YSIsImhhbmRsZUNhcmRDbGljayIsImNhcmRTZWxlY3RvciIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfaGFuZGxlQ2FyZENsaWNrIiwiX2NhcmRTZWxlY3RvciIsIl9nZXRUZW1wbGF0ZSIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfbGlrZUJ1dHRvbiIsIl9lbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9jbGlja0xpa2UiLCJfZGVsQnV0dG9uIiwiX2NsaWNrRGVsZXRlIiwiX2NhcmRJbWFnZSIsImNsYXNzTGlzdCIsInRvZ2dsZSIsInJlbW92ZSIsImdlbmVyYXRlQ2FyZCIsIl9jYXJkVGl0bGUiLCJzcmMiLCJhbHQiLCJ0ZXh0Q29udGVudCIsIkZvcm1WYWxpZGF0b3IiLCJzZWxlY3RvcnNDb25maWd1cmF0aW9uIiwiZm9ybUVsZW1lbnQiLCJfc2VsZWN0b3JzQ29uZmlndXJhdGlvbiIsIl9mb3JtRWxlbWVudCIsIl9zdWJtaXRCdXR0b24iLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbnB1dExpc3QiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXRTZWxlY3RvciIsIl9zaG93SW5wdXRFcnJvciIsImlucHV0RWxlbWVudCIsImVycm9yTWVzc2FnZSIsImVycm9yRWxlbWVudCIsImlkIiwiYWRkIiwiZXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9oaWRlSW5wdXRFcnJvciIsIl9pc1ZhbGlkIiwidmFsaWRpdHkiLCJ2YWxpZCIsInZhbGlkYXRpb25NZXNzYWdlIiwiX2hhc0ludmFsaWRJbnB1dCIsInNvbWUiLCJfYWN0aXZldGluZ1N1Ym1pdCIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJyZW1vdmVBdHRyaWJ1dGUiLCJkZWFjdGl2ZXRpbmdTdWJtaXQiLCJzZXRBdHRyaWJ1dGUiLCJfdG9nZ2xlQnV0dG9uU3RhdGUiLCJpbnB1dExpc3QiLCJmb3JFYWNoIiwiZW5hYmxlVmFsaWRhdGlvbiIsInJlc2V0VmFsaWRhdGlvbiIsIlBvcHVwIiwicG9wdXBTZWxlY3RvciIsIl9wb3B1cCIsIm9wZW4iLCJfaGFuZGxlRXNjQ2xvc2UiLCJjbG9zZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldnQiLCJrZXkiLCJzZXRFdmVudExpc3RlbmVycyIsInRhcmdldCIsImNvbnRhaW5zIiwiUG9wdXBXaXRoRm9ybSIsInN1Ym1pdEZvcm0iLCJzdXBlciIsIl9zdWJtaXRGb3JtIiwiX2Zvcm0iLCJfaW5wdXRWYWx1ZXMiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJpbnB1dHNWYWx1ZSIsIml0ZW0iLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwicmVzZXQiLCJlZGl0QnV0dG9uIiwicG9wdXBFZGl0IiwicG9wdXBBZGQiLCJuYW1lSW5wdXQiLCJqb2JJbnB1dCIsImFkZEJ1dHRvbiIsImZvcm1TZWxlY3RvciIsImFkZEZvcm1WYWxpZGF0aW9uIiwicG9wdXBXaXRoWm9vbSIsIl9wb3B1cEltYWdlIiwiX3BvcHVwU3VidGl0bGUiLCJvcGVuUG9wdXBab29tIiwibmV3SXRlbSIsIml0ZW1zIiwicmVuZGVyZXIiLCJzZWxlY3RvckNvbnRhaW5lciIsIl9pdGVtcyIsIl9yZW5kZXJlciIsIl9jb250YWluZXIiLCJhZGRJdGVtIiwicHJlcGVuZCIsInJlbmRlckl0ZW1zIiwiY3JlYXRlTmV3Q2FyZCIsInVzZXJJbmZvbSIsIm5hbWVTZWxlY3RvciIsImluZm9TZWxlY3RvciIsIl9qb2IiLCJnZXRVc2VySW5mbyIsImluZm8iLCJzZXRVc2VySW5mbyIsImpvYiIsInBvcHVwRm9ybUVkaXQiLCJ1c2VySW5mb3JtYXRpb24iLCJzZXRJbnB1dFZhbHVlIiwicG9wdXBGb3JtQWRkIl0sInNvdXJjZVJvb3QiOiIifQ==